# Script to make scripts to run distribution plots for each configuration       
# Deletes old scripts if they exist already                                                                                                           
import os
import json
import glob

event_type = '0vbb'
nfiles = 100 # 101 total for kr83m, 1001 total for 0vbb
rcut = 300 # mm
zcut = 1200 # mm
base_sipm_thresh = 2 # pes
bins = 50
outdir = f'/n/home12/tcontreras/plots/FlexEresStudies/{event_type}/'
mcs = {'s1.3mmp3.5mm':
           {'size':1.3, 'pitch':3.5,  'teflon':False, 'nsipms':61053,   'run':True},
       's1.3mmp2.4mm':
           {'size':1.3, 'pitch':2.4,    'teflon':False, 'nsipms':129889,  'run':True},
       's3mmp5.5mm':
           {'size':3, 'pitch':5.5,  'teflon':False, 'nsipms':24748, 'run':True}}

jobfile_name = 'jobids_eres_'+event_type+'.txt'
eresdir_name = 'data_eres_'+event_type+f'_rcut{rcut}_sthresh{base_sipm_thresh}_zcut{zcut}'
with open(jobfile_name, 'w') as jf:

    os.system(f"rm -r {eresdir_name}")
    os.system(f"rm -r {outdir}{eresdir_name}")
    os.system(f"mkdir {eresdir_name}")
    os.system(f"mkdir {outdir}{eresdir_name}")


    jf.write(f'Job IDs for Distributions of {event_type} Simulations:\n')
    for name in mcs:
        mc = mcs[name]
        if mc['run']:
            jf.write(name+'\n')
            pyfile_name = event_type + '.' + name + '.eres.py'
            batchfile_name = 'run_eres_'+event_type+'_'+name+'.sh'

            
            # Scale SiPM Threshold based on SiPM size
            sipm_thresh = int(base_sipm_thresh * mc['size']**2 / 1.3**2)
            with open('macros/'+pyfile_name, 'w') as f:
                f.write("import pandas as pd\n")
                f.write("import matplotlib as mpl\n")
                f.write("mpl.use('Agg')\n")
                f.write("import matplotlib.pyplot as plt\n")
                f.write("from matplotlib.offsetbox import AnchoredText\n")
                f.write("from matplotlib.ticker import AutoMinorLocator\n")
                f.write("import numpy as np\n")
                f.write("from scipy.optimize import curve_fit\n")
                f.write("from scipy.stats import norm\n")
                f.write("from fit_functions import fit_energy, plot_fit_energy, print_fit_energy, get_fit_params\n")
                f.write("from ic_functions import *\n")
                f.write("from invisible_cities.core.core_functions  import shift_to_bin_centers\n")
                f.write("import invisible_cities.database.load_db as db\n")
                f.write("import json\n")
                f.write("import glob\n")
                f.write(" \n")
                f.write(f"SiPMsize     = {mc['size']}\n")
                f.write(f"SiPMpitch    = {mc['pitch']}\n")
                f.write(f"mc_name      = '{name}'\n")
                f.write(f"teflon       = {mc['teflon']}\n")
                f.write(f"event_type   = '{event_type}'\n")
                f.write(f"rcut         = {rcut}\n") 
                f.write(f"zcut         = {zcut}\n")
                f.write(f"sipm_thresh  = {sipm_thresh}\n") 
                f.write(f"outdir       = '{outdir}'\n") 
                
                f.write("if teflon:\n") 
                f.write("    mc_teflon = 'teflon'\n")
                f.write("    mc_file_name = mc_name[0:-7]\n") 
                f.write("else:\n") 
                f.write("    mc_teflon = 'no_teflon'\n")
                f.write("    mc_file_name = mc_name\n") 
                f.write(" \n") 
                f.write(f"num_sipms = {mc['nsipms']}\n") 
                f.write(f"num_files = {nfiles}\n") 
                f.write("\n") 
                f.write("def Center_of_Event(sipmtable_df, sipm_thresh=0):\n") 
                f.write("    event_id = sipmtable_df.event_id.values[0]\n") 
                f.write("    sipmtable_df = sipmtable_df[sipmtable_df.charge > sipm_thresh]\n") 
                f.write("    x = np.sum(sipmtable_df.charge*sipmtable_df.X)/np.sum(sipmtable_df.charge)\n") 
                f.write("    y = np.sum(sipmtable_df.charge*sipmtable_df.Y)/np.sum(sipmtable_df.charge)\n") 
                f.write("    z = np.sum(sipmtable_df.charge*sipmtable_df.Z)/np.sum(sipmtable_df.charge)\n")
                f.write("    charge = np.sum(sipmtable_df.charge)\n") 
                f.write("    r = np.sqrt(x**2 + y**2)\n") 
                f.write("    return pd.Series({'event_id':event_id, 'charge':charge, 'X':x, 'Y':y, 'Z':z, 'r':r})\n") 
                #f.write("    return pd.Series({'event_id':event_id, 'charge':charge, 'X':x, 'Y':y, 'r':r})\n") 
                f.write(" \n") 
                f.write("active_diam = 984.\n") 
                f.write("tp_area = np.pi * (active_diam/2.)**2  # mm^2\n") 
                f.write("coverage = 100 * num_sipms * SiPMsize**2 / tp_area\n") 
                f.write("data_dir = '/n/holystore01/LABS/guenette_lab/Lab/data/NEXT/FLEX/mc/eres_22072022/full_sims/'+mc_name+'/'+event_type+'/detsim/reduced_hdf5/'\n") 
                #f.write("fast_sims = [data_dir + f'{event_type}.'+mc_file_name+'.' + str(i) + '.detsim.reduced.h5' for i in range(0, num_files)]\n") 
                f.write("fast_sims = glob.glob(data_dir)\n")
                #f.write("if num_files == 'all':\n")
                f.write("num_files  = len(fast_sims)\n")
                f.write("\n")
                f.write("fast_data = pd.DataFrame()\n") 
                f.write("mc = {'size':SiPMsize, 'pitch':SiPMpitch,\n") 
                f.write("      'teflon':mc_teflon, 'name': f'{SiPMsize} mm size, {SiPMpitch} pitch, {mc_teflon}',\n") 
                f.write("      'num_sipms': num_sipms, 'coverage': coverage, 'rcut':rcut, 'sthresh':sipm_thresh}\n") 
                f.write("for j in range(0, num_files): \n") 
                f.write("    this_data = pd.read_hdf(fast_sims[j], 'SiPM/Waveforms')\n") 
                f.write("    event_centers = this_data.groupby('event_id').apply(lambda grp: Center_of_Event(grp, sipm_thresh))\n") 
                f.write("    event_centers = event_centers[event_centers.r < rcut]\n")
                f.write("    event_centers = event_centers[event_centers.Z < zcut]\n")
                f.write("    fast_data = fast_data.append(event_centers)\n") 
                f.write("\n")
                f.write("#####################\n")
                f.write("##### Eres Plot #####\n")
                f.write("#####################\n")          
                f.write("\n")
                f.write("bins_fit = 50\n")
                f.write("if event_type == 'kr83m':\n")
                f.write("    fit_range_sipms = (np.min(fast_data.charge), np.max(fast_data.charge))\n")
                f.write("else:\n")
                f.write("    y, b = np.histogram(fast_data.charge, bins= bins_fit, range=[np.min(fast_data.charge), np.max(fast_data.charge)])\n")
                f.write("    x = shift_to_bin_centers(b)\n")
                f.write("    peak = x[np.argmax(y)]\n")
                f.write("    fit_range_sipms = (peak - np.std(fast_data.charge)*3, peak + np.std(fast_data.charge)*3)\n")
                f.write("\n")
                f.write("sipm_fit = fit_energy(fast_data.charge, bins_fit, fit_range_sipms)\n")
                f.write("mc['sipm_eres'], mc['sipm_fwhm'], mc['sipm_mean'], mc['sipm_eres_err'], mc['sipm_fwhm_err'], mc['sipm_mean_err'], mc['sipm_chi2'] = get_fit_params(sipm_fit)\n")


                f.write("print(mc['name']+'-------------------')\n")
                f.write("print('Coverage = '+str(mc['coverage']))\n")
                f.write("print('Mean and std', np.mean(event_centers.charge), np.std(event_centers.charge))\n")
                f.write("print('Eres err', mc['sipm_eres_err'])\n")
                f.write("print_fit_energy(sipm_fit)\n")
                f.write("plot_fit_energy(sipm_fit)\n")
                f.write("plt.xlabel('Charge [pes]')\n")
                f.write("plt.title('Energy Resolution Fit, '+mc['name'])\n")
                f.write("plt.savefig(outdir+f'eres_r{rcut}_sthresh{sipm_thresh}_'+mc_name+'.png')\n")
                f.write("plt.close()\n")

                f.write("\n") 
                f.write(f"plt.hist(fast_data.charge, bins={bins}, label=f'R < {rcut}, SiPM Charge > {sipm_thresh}')\n") 
                f.write("plt.title(mc['name']+', '+event_type)\n") 
                f.write("plt.xlabel('Total SiPM Charge [pes]')\n") 
                f.write("plt.savefig(outdir+f'charge_r{rcut}_sthresh{sipm_thresh}_'+mc_name+'.png')\n") 
                f.write("plt.close()\n") 
                f.write("\n") 
                f.write(f"plt.hist(fast_data.X, bins={bins}, label=f'R < {rcut}, SiPM Charge > {sipm_thresh}')\n") 
                f.write("plt.title(mc['name']+', '+event_type)\n") 
                f.write("plt.xlabel('X [mm]')\n") 
                f.write("plt.savefig(outdir+f'x_r{rcut}_sthresh{sipm_thresh}_'+mc_name+'.png')\n") 
                f.write("plt.close() \n") 
                f.write("\n") 
                f.write(f"plt.hist(fast_data.Y, bins={bins}, label=f'R < {rcut}, SiPM Charge > {sipm_thresh}')\n") 
                f.write("plt.title(mc['name']+', '+event_type)\n") 
                f.write("plt.xlabel('Y [mm]')\n") 
                f.write("plt.savefig(outdir+f'y_r{rcut}_sthresh{sipm_thresh}_'+mc_name+'.png')\n") 
                f.write("plt.close()\n") 
                f.write("\n") 
                f.write(f"plt.hist(fast_data.r, bins={bins}, label=f'R < {rcut}, SiPM Charge > {sipm_thresh}')\n") 
                f.write("plt.title(mc['name']+', '+event_type)\n") 
                f.write("plt.xlabel('R [mm]')\n") 
                f.write("plt.savefig(outdir+f'r_r{rcut}_sthresh{sipm_thresh}_'+mc_name+'.png')\n") 
                f.write("plt.close()\n") 
                f.write("\n")
                f.write("plt.hist(fast_data.Z, bins=50, label=f'R < 300, SiPM Charge > 2')\n")
                f.write("plt.title(mc['name']+', '+event_type)\n")
                f.write("plt.xlabel('Z [mm]')\n")
                f.write("plt.savefig(outdir+f'z_r{rcut}_sthresh{sipm_thresh}_'+mc_name+'.png')\n")
                f.write("plt.close()\n")

                f.write("\n") 
                f.write("# Save eres numbers to a file\n")
                f.write("\n")
                f.write(f"json.dump(mc, open('{eresdir_name}/'+mc_name+'.txt', 'w'))\n")

            with open('macros/'+batchfile_name, 'w') as f:
                f.write("#!/bin/bash\n")
                f.write("#SBATCH -n 1                                   # Number of cores\n")
                f.write("#SBATCH -N 1                                   # Ensure that all cores are on one machine\n")           
                f.write("#SBATCH -t 0-1:00                              # Runtime in D-HH:MM, minimum of 10 minutes\n")
                f.write("#SBATCH -p guenette                            # Partition to submit to\n")
                f.write("#SBATCH --mem=5000                             # Memory pool for all cores (see also --mem-per-cpu)\n")
                f.write(f"#SBATCH -o out/{event_type}_{name}_eres.out  # File to which STDOUT will be written, %j inserts jobid\n")
                f.write(f"#SBATCH -e err/{event_type}_{name}_eres.err  # File to which STDERR will be written, %j inserts jobid\n")                 
                f.write("\n")
                f.write("source /n/holystore01/LABS/guenette_lab/Lab/data/NEXT/FLEX/mc/eres_22072022/IC_setup.sh\n")
                f.write("\n")
                f.write(f"python  /n/holystore01/LABS/guenette_lab/Lab/data/NEXT/FLEX/mc/eres_22072022/eres_taylor/macros/{pyfile_name}\n")

            os.system(f"sbatch macros/{batchfile_name} > out/temp.txt")
            with open('out/temp.txt', 'r') as f:
                jf.write(f.readlines()[0])
